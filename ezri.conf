connect {
   server    localhost
   port      7000
   password  putithere
   name      services.arloria.net
   ircd      unreal
   options {
      numeric 3
   }
   describe  ArloriaNET Services, powered by Ezri
}

// Remember that the first extensions to load should be those that contain
// database loading routines that the other extensions make use of, such as
// Register and its nickname/channel loading routines.

core {
   database {
      load db_simple
   }
   languages {
      load en
   }
   extensions {
      load register
      load log
      load access
      load ajoin
      load invite
      load help
      load info
      load kill
      load mode
      load modload
      load userlist
   }
   log_level debug_core
}

// Note that the first config entry will be considered
// to be the "prime" client of its type, and may be
// used as a default in some cases.

svsclient {
   nickname  ChanServ
   username  ChanServ
   type      chanserv
   routine   svs_regular
   hostname  services.arloria.net
   realname  ArloriaNET Channel Service
   trigger   !
}

svsclient {
   nickname  OperServ
   username  OperServ
   type      operserv
   routine   svs_regular
   hostname  services.arloria.net
   realname  ArloriaNET Staff Service
   trigger   ?
}

svsclient {
   nickname   NickServ
   username   NickServ
   type       nickserv
   routine    svs_regular
   hostname   services.arloria.net
   realname   ArloriaNET Nickname Service
   trigger    ~
}

svsclient {
   nickname   HelpServ
   username   HelpServ
   type       helpserv
   routine    svs_regular
   hostname   services.arloria.net
   realname   ArloriaNET Help Service
   trigger    !
}

svsclient {
   nickname   HostServ
   username   HostServ
   type       hostserv
   routine    svs_regular
   hostname   services.arloria.net
   realname   ArloriaNET Hostname Service
   trigger    -
}

// Settings for ChanServ
//   Presence: ChanServ joins channel by default, on/off/disable
//   Forwarding: Forward messages to the correct services client if applicable
//   Levels: Default access levels for ChanServ commands.
ChanServ {
   presence    on
   forwarding  on
   levels {
      default_voice    100
      default_halfop   250
      default_op       500
      default_admin    750
      default_access   500
      default_cs_ban   250
      default_invite   250      
      default_kick     250
   }
}

// Log settings
// "client" specifies the client to send log messages from
// Channel must be registered.
log {
   channel {
      name #opers
      join On
   }
   client      OperServ
   log_level   all
}

// Controls what the "access" module adds
// If these settings are removed, the default is "on"
access {
   EnableHalfops   On
   EnableAdmins    On
   EnableOwners    On
}

// Controls what the "register" module adds
// If these settings are removed, the default is "on"
register {
   RegisterNicknames   on
   RegisterChannels    on
   invite              on
   modes               +tn
}

// Settings for ghost/recover commands
// GhostClient: Client which sends auto-ghost commands.
// Not currently in use.
ghost {
   GhostClient     NickServ
   GuestNickname   Guest<RAND>
   AutoRecover     20
}

helpserv {
   Channel #opers
   HelperLevel op
   VoiceOnPickup on
   
}

// Not currently in use.
backup {
  nicknames   24h
  channels    24h
  hosts       48h
}